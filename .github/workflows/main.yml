name: render eBook
on: [push]
permissions:
  actions: write
  contents: write
jobs:
  render-ebook:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: nixbuild/nix-quick-install-action@v27
    - name: Restore and cache Nix store
      uses: nix-community/cache-nix-action@v5
      with:
        # restore and save a cache using this key
        primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: nix-${{ runner.os }}-
        # collect garbage until Nix store size (in bytes) is at most this number
        # before trying to save a new cache
        gc-max-store-size-linux: 1073741824
        # do purge caches
        purge: true
        # purge all versions of the cache
        purge-prefixes: cache-${{ runner.os }}-
        # created more than this number of seconds ago relative to the start of the `Post Restore` phase
        purge-created: 0
        # except the version with the `primary-key`, if it exists
        purge-primary-key: never
    - run: nix build .#
    - uses: actions/upload-artifact@v4
      with:
        name: rendered-ebook
        path: result

  upload-ebook:
    runs-on: ubuntu-latest
    needs: render-ebook
    steps:
    - name: Checkout the target branch
      uses: actions/checkout@v4
      with:
        ref: rendered
        persist-credentials: false
        fetch-depth: 0
    - uses: actions/download-artifact@v4
      with:
        name: rendered-ebook
        path: .
    - name: Commit and push artifacts
      run: |
        git config --global user.email "CI@github.com"
        git config --global user.name "CI"
        git add *.pdf
        git commit -m "Add artifacts from build"
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: rendered